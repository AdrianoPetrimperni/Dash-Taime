<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard de Prospecção Ativa - Taime Agência</title>
    <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-auth-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-firestore-compat.js"></script>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body, html {
            margin: 0;
            padding: 0;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
        }
        .loading-spinner {
            border: 2px solid #f3f3f3;
            border-top: 2px solid #28e7c5;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            animation: spin 1s linear infinite;
            margin-right: 8px;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .quick-filter-btn {
            padding: 8px 16px;
            margin: 4px;
            border-radius: 8px;
            font-size: 12px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 2px solid transparent;
        }
        .quick-filter-btn:hover {
            transform: scale(1.05);
        }
    </style>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        const { useState, useEffect } = React;

        const App = () => {
            const [funnelData, setFunnelData] = useState({
                leads: 0,
                qualification: 0,
                meeting: 0,
                proposal: 0,
                closedBusiness: 0,
            });
            const [startDate, setStartDate] = useState('');
            const [endDate, setEndDate] = useState('');
            const [filterStatus, setFilterStatus] = useState('');
            const [isProcessing, setIsProcessing] = useState(false);

            const colors = {
                darkBackground: '#201e26',
                primaryPurple: '#6843e1',
                secondaryGreen: '#28e7c5',
                white: '#ffffff',
                grayText: '#a0aec0',
            };

            // Função para aplicar filtro via webhook N8N
            const applyDateFilter = async () => {
                setIsProcessing(true);
                setFilterStatus('Processando filtro...');

                try {
                    const payload = {
                        startDate: startDate || null,
                        endDate: endDate || null,
                        timestamp: new Date().toISOString()
                    };
                    
                    console.log("📤 Payload enviado:", payload);
                    
                    const response = await fetch("https://automacao.taimeagencia.com.br/webhook-test/d55f26f2-8b5a-4e5a-b075-ba91646e2734", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify(payload)
                    });

                    if (response.ok) {
                        const data = await response.json();
                        console.log("✅ Resposta do N8N:", data);
                        
                        // Atualizar dados imediatamente se N8N retornar dados
                        if (data && typeof data === 'object') {
                            setFunnelData({
                                leads: data.leads || 0,
                                qualification: data.qualification || 0,
                                meeting: data.meeting || 0,
                                proposal: data.proposal || 0,
                                closedBusiness: data.closedBusiness || 0,
                            });
                            
                            setFilterStatus(data.filterApplied || `Filtro aplicado: ${startDate || 'início'} até ${endDate || 'hoje'}`);
                        } else {
                            setFilterStatus(`Filtro aplicado: ${startDate || 'início'} até ${endDate || 'hoje'} - Aguardando dados...`);
                        }
                        
                        setIsProcessing(false);
                        
                    } else {
                        throw new Error(`Erro HTTP: ${response.status}`);
                    }
                    
                } catch (error) {
                    console.error("❌ Erro ao enviar filtro:", error);
                    setIsProcessing(false);
                    setFilterStatus(`Erro ao aplicar filtro: ${error.message}`);
                }
            };

            // Filtros rápidos dinâmicos
            const getQuickFilterDates = () => {
                const today = new Date();
                const year = today.getFullYear();
                const month = today.getMonth();
                
                return {
                    thisMonth: {
                        start: new Date(year, month, 1).toISOString().split('T')[0],
                        end: new Date(year, month + 1, 0).toISOString().split('T')[0],
                        label: 'Este Mês'
                    },
                    lastMonth: {
                        start: new Date(year, month - 1, 1).toISOString().split('T')[0],
                        end: new Date(year, month, 0).toISOString().split('T')[0],
                        label: 'Mês Passado'
                    },
                    last3Months: {
                        start: new Date(year, month - 3, 1).toISOString().split('T')[0],
                        end: new Date(year, month + 1, 0).toISOString().split('T')[0],
                        label: 'Últimos 3 Meses'
                    },
                    thisYear: {
                        start: new Date(year, 0, 1).toISOString().split('T')[0],
                        end: new Date(year, 11, 31).toISOString().split('T')[0],
                        label: 'Este Ano'
                    },
                    last30Days: {
                        start: new Date(today.setDate(today.getDate() - 30)).toISOString().split('T')[0],
                        end: new Date().toISOString().split('T')[0],
                        label: 'Últimos 30 Dias'
                    }
                };
            };

            const applyQuickFilter = (filterKey) => {
                const filters = getQuickFilterDates();
                const filter = filters[filterKey];
                
                setStartDate(filter.start);
                setEndDate(filter.end);
                setIsProcessing(true);
                setFilterStatus(`Aplicando filtro: ${filter.label}...`);
                
                const payload = {
                    startDate: filter.start,
                    endDate: filter.end,
                    timestamp: new Date().toISOString()
                };
                
                console.log(`🎯 Aplicando filtro rápido: ${filter.label}`, payload);
                
                fetch("https://automacao.taimeagencia.com.br/webhook-test/d55f26f2-8b5a-4e5a-b075-ba91646e2734", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(payload)
                }).then(response => {
                    if (response.ok) {
                        return response.json();
                    }
                    throw new Error(`HTTP ${response.status}`);
                }).then(data => {
                    console.log("✅ Filtro rápido aplicado:", data);
                    
                    if (data && typeof data === 'object') {
                        setFunnelData({
                            leads: data.leads || 0,
                            qualification: data.qualification || 0,
                            meeting: data.meeting || 0,
                            proposal: data.proposal || 0,
                            closedBusiness: data.closedBusiness || 0,
                        });
                        
                        setFilterStatus(data.filterApplied || `${filter.label} aplicado`);
                    } else {
                        setFilterStatus(`${filter.label} aplicado`);
                    }
                    
                    setIsProcessing(false);
                    
                }).catch(error => {
                    console.error("❌ Erro no filtro rápido:", error);
                    setFilterStatus(`Erro ao aplicar ${filter.label}`);
                    setIsProcessing(false);
                });
            };

            // Limpar filtros
            const clearFilters = async () => {
                setStartDate('');
                setEndDate('');
                setFilterStatus('Carregando todos os dados...');
                setIsProcessing(true);

                try {
                    const response = await fetch("https://automacao.taimeagencia.com.br/webhook-test/d55f26f2-8b5a-4e5a-b075-ba91646e2734", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({
                            startDate: "2020-01-01",
                            endDate: "2030-12-31",
                            timestamp: new Date().toISOString(),
                            clearFilter: true
                        })
                    });

                    if (response.ok) {
                        const data = await response.json();
                        if (data && typeof data === 'object') {
                            setFunnelData({
                                leads: data.leads || 0,
                                qualification: data.qualification || 0,
                                meeting: data.meeting || 0,
                                proposal: data.proposal || 0,
                                closedBusiness: data.closedBusiness || 0,
                            });
                        }
                        setFilterStatus('Todos os dados carregados');
                    }
                    setIsProcessing(false);
                } catch (error) {
                    console.error("Erro:", error);
                    setIsProcessing(false);
                }
            };

            // Função para calcular taxa de conversão
            const calculateConversionRate = (from, to) => {
                if (from === 0) return '0.00%';
                return ((to / from) * 100).toFixed(2) + '%';
            };

            const conversionRates = {
                leadsToQualification: calculateConversionRate(funnelData.leads, funnelData.qualification),
                qualificationToMeeting: calculateConversionRate(funnelData.qualification, funnelData.meeting),
                meetingToProposal: calculateConversionRate(funnelData.meeting, funnelData.proposal),
                proposalToClosed: calculateConversionRate(funnelData.proposal, funnelData.closedBusiness),
                overall: calculateConversionRate(funnelData.leads, funnelData.closedBusiness),
            };

            // Componentes
            const FunnelCard = ({ title, value, bgColor }) => (
                <div className="flex flex-col items-center p-4 rounded-xl shadow-lg mx-1 my-2 w-full md:w-[19%] md:min-w-[150px]" style={{ backgroundColor: bgColor }}>
                    <h3 className="text-xl font-semibold mb-2" style={{ color: colors.white }}>{title}</h3>
                    <p className="text-4xl font-bold" style={{ color: colors.white }}>{value}</p>
                </div>
            );

            const ConversionRateCard = ({ title, rate }) => (
                <div className="flex flex-col items-center p-3 rounded-xl shadow-md m-2 w-full md:w-1/4" style={{ backgroundColor: colors.primaryPurple }}>
                    <h4 className="text-md font-semibold text-center" style={{ color: colors.white }}>{title}</h4>
                    <p className="text-2xl font-bold mt-1" style={{ color: colors.secondaryGreen }}>{rate}</p>
                </div>
            );

            const quickFilters = getQuickFilterDates();

            return (
                <div className="min-h-screen p-6" style={{ backgroundColor: colors.darkBackground }}>
                    <div className="max-w-7xl mx-auto">
                        {/* Cabeçalho */}
                        <header className="flex items-center py-6 relative">
                            <img
                                src="https://taimeagencia.com.br/wp-content/webp-express/webp-images/uploads/2024/11/agencia-marketing-taime-aceleradora-marketing-vendas-estrategias-redes-sociais-videos-profissionais-campanha-anuncios-online-google-instagram-logo2.png.webp"
                                alt="Taime Agência Logo"
                                className="h-12 w-auto"
                                onError={(e) => { e.target.src = 'https://placehold.co/150x50/201e26/28e7c5?text=TAIME_AGENCIA_LOGO'; }}
                            />
                            <h1 className="text-4xl font-bold text-center absolute left-1/2 transform -translate-x-1/2 whitespace-nowrap" style={{ color: colors.white }}>
                                Dashboard de Prospecção Ativa
                            </h1>
                            <div className="flex-grow"></div>
                        </header>

                        {/* Status do filtro com loading */}
                        {(filterStatus || isProcessing) && (
                            <div className="text-center mb-4 p-3 rounded-lg flex items-center justify-center" style={{ backgroundColor: colors.primaryPurple }}>
                                {isProcessing && <div className="loading-spinner"></div>}
                                <p style={{ color: colors.secondaryGreen }}>
                                    {isProcessing ? 'Processando filtro...' : filterStatus}
                                </p>
                            </div>
                        )}

                        {/* Filtros Rápidos */}
                        <section className="text-center mb-6">
                            <h3 className="text-lg font-semibold mb-3" style={{ color: colors.white }}>Filtros Rápidos</h3>
                            <div className="flex flex-wrap justify-center">
                                {Object.entries(quickFilters).map(([key, filter]) => (
                                    <button
                                        key={key}
                                        onClick={() => applyQuickFilter(key)}
                                        disabled={isProcessing}
                                        className="quick-filter-btn disabled:opacity-50"
                                        style={{ 
                                            backgroundColor: colors.secondaryGreen, 
                                            color: colors.darkBackground 
                                        }}
                                    >
                                        {filter.label}
                                    </button>
                                ))}
                            </div>
                        </section>

                        {/* Filtro de data customizado */}
                        <section className="flex flex-col md:flex-row justify-center items-center my-6 space-y-2 md:space-y-0 md:space-x-4">
                            <div className="flex flex-col items-center">
                                <label htmlFor="startDate" className="text-md font-semibold mb-1" style={{ color: colors.white }}>Data Inicial:</label>
                                <input
                                    type="date"
                                    id="startDate"
                                    value={startDate}
                                    onChange={(e) => setStartDate(e.target.value)}
                                    disabled={isProcessing}
                                    className="p-2 text-sm rounded-lg bg-gray-800 border-2 border-gray-700 focus:outline-none focus:border-purple-600 disabled:opacity-50"
                                    style={{ color: colors.white }}
                                />
                            </div>
                            <div className="flex flex-col items-center">
                                <label htmlFor="endDate" className="text-md font-semibold mb-1" style={{ color: colors.white }}>Data Final:</label>
                                <input
                                    type="date"
                                    id="endDate"
                                    value={endDate}
                                    onChange={(e) => setEndDate(e.target.value)}
                                    disabled={isProcessing}
                                    className="p-2 text-sm rounded-lg bg-gray-800 border-2 border-gray-700 focus:outline-none focus:border-purple-600 disabled:opacity-50"
                                    style={{ color: colors.white }}
                                />
                            </div>
                            <div className="flex gap-2 mt-4 md:mt-0">
                                <button
                                    onClick={applyDateFilter}
                                    disabled={isProcessing}
                                    className="px-4 py-2 rounded-lg font-semibold bg-gradient-to-r from-purple-600 to-indigo-600 text-white shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 text-sm disabled:opacity-50 disabled:transform-none flex items-center"
                                >
                                    {isProcessing && <div className="loading-spinner"></div>}
                                    Aplicar Filtro Customizado
                                </button>
                                <button
                                    onClick={clearFilters}
                                    disabled={isProcessing}
                                    className="px-4 py-2 rounded-lg font-semibold bg-gradient-to-r from-gray-600 to-gray-700 text-white shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 text-sm disabled:opacity-50 disabled:transform-none"
                                >
                                    Todos os Dados
                                </button>
                            </div>
                        </section>

                        {/* Funil de Vendas */}
                        <section className="my-8">
                            <h2 className="text-3xl font-semibold text-center mb-6" style={{ color: colors.white }}>Funil de Vendas</h2>
                            <div className="flex flex-wrap md:flex-nowrap justify-center items-center">
                                <FunnelCard title="Leads" value={funnelData.leads} bgColor={colors.primaryPurple} />
                                <span className="text-4xl mx-2 md:mx-4 hidden md:block" style={{ color: colors.secondaryGreen }}>→</span>
                                <FunnelCard title="Qualificação" value={funnelData.qualification} bgColor={colors.primaryPurple} />
                                <span className="text-4xl mx-2 md:mx-4 hidden md:block" style={{ color: colors.secondaryGreen }}>→</span>
                                <FunnelCard title="Reunião" value={funnelData.meeting} bgColor={colors.primaryPurple} />
                                <span className="text-4xl mx-2 md:mx-4 hidden md:block" style={{ color: colors.secondaryGreen }}>→</span>
                                <FunnelCard title="Proposta" value={funnelData.proposal} bgColor={colors.primaryPurple} />
                                <span className="text-4xl mx-2 md:mx-4 hidden md:block" style={{ color: colors.secondaryGreen }}>→</span>
                                <FunnelCard title="Negócio Fechado" value={funnelData.closedBusiness} bgColor={colors.secondaryGreen} />
                            </div>
                        </section>

                        {/* Taxas de Conversão */}
                        <section className="my-8">
                            <h2 className="text-3xl font-semibold text-center mb-6" style={{ color: colors.white }}>Taxas de Conversão</h2>
                            <div className="flex flex-wrap justify-center">
                                <ConversionRateCard title="Leads para Qualificação" rate={conversionRates.leadsToQualification} />
                                <ConversionRateCard title="Qualificação para Reunião" rate={conversionRates.qualificationToMeeting} />
                                <ConversionRateCard title="Reunião para Proposta" rate={conversionRates.meetingToProposal} />
                                <ConversionRateCard title="Proposta para Fechado" rate={conversionRates.proposalToClosed} />
                                <ConversionRateCard title="Conversão Total" rate={conversionRates.overall} />
                            </div>
                        </section>
                    </div>
                </div>
            );
        };

        const root = ReactDOM.createRoot(document.getElementById('root'));
        root.render(<App />);
    </script>
</body>
</html>
